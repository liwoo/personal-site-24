---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';
import Hero2 from '~/components/widgets/Hero2.astro';

import { getFormattedDate } from '~/utils/utils';

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsBlogPost();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props as Props;

const url = getCanonical(getPermalink(post.permalink, 'post'));
const image = (await findImage(post.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: post.title,
    description: post.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image
        ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] }
        : {}),
    },
  },
  { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <Hero2>
    <Fragment slot="title">
      <div class="z-10 relative">
        <ToBlogLink />
      </div>
      {post.title}
    </Fragment>

    <Fragment slot="subtitle" class="relative z-10">{post.excerpt}</Fragment>
    <Fragment slot="content">
      <div class="flex justify-between flex-col sm:flex-row mt-0 mb-2 text-secondary z-10 relative">
        <p>
          {'⏰ '}
          <time datetime={String(post.publishDate)} class="inline-block">{getFormattedDate(post.publishDate)}</time>
          {
            post.category && (
              <>
                {' '}
                ·{' '}
                <a class="capitalize hover:underline inline-block" href={getPermalink(post.category, 'category')}>
                  {post.category.replaceAll('-', ' ')}
                </a>
              </>
            )
          }
          {post.readingTime && <> · {post.readingTime} min read</>}
        </p>
      </div>
    </Fragment>
  </Hero2>
  <div class="relative">
    <SinglePost post={{ ...post, image: image }} url={url} />
  </div>
</Layout>
