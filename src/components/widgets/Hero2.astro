---
import Image from '~/components/common/Image.astro';
import type { CallToAction } from '~/types';
import Button from '~/components/ui/Button.astro';
import HeroGrid from '../ui/HeroGrid.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
} = Astro.props;
---

<section class="relative not-prose">
  <div class="absolute z-10 inset-y-0 flex flex-col w-full md:w-1/3 lg:w-1/2 right-0" aria-hidden="true">
    <HeroGrid />
  </div>
  <div class="relative container">
    <div class="pt-28 lg:pt-52 lg:flex lg:items-center lg:gap-8">
      <div class="basis-2/3 lg:text-left pb-10 md:pb-16 mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
              set:html={tagline}
            />
          )
        }
        {title && <h1 class="text-4xl md:text-5xl font-semibold mb-4 font-heading text-default" set:html={title} />}
        <div class="max-w-3xl lg:max-w-none">
          {subtitle && <p class="text-lg text-muted" set:html={subtitle} />}

          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto mt-6 flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <p class="text-primary z-10 relative" set:html={content} />}
      </div>
      <div class="basis-1/2">
        {
          image && (
            <div class="relative m-auto max-w-5xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-md w-full"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={600}
                  height={600}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
